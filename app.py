import streamlit as st
import numpy as np
from tensorflow.keras.models import load_model
from PIL import Image
import os
import gdown
import time
from fpdf import FPDF
import base64
from datetime import datetime

# Mapping of model names to Google Drive file IDs
model_ids = {
    "DenseNet169 (Keras)": "1dIhc-0vd9sDoU5O6H0ZE6RYrP-CAyWks",
    "InceptionV3 (Keras)": "10B53bzc1pYrQnBfDqBWrDpNmzWoOl9ac",
    "MobileNet (Keras)": "1mlfoy6kKXUwIciZW3nftmiMHOTzpy6_s",
    "EfficientNetB3 (Keras)": "1cQA3_oH2XjDFK-ZE9D9YsP6Ya8fQiPOy"
}

# Function to download and load model
@st.cache_resource
def load_tensorflow_model(file_id, model_name):
    model_path = f"models/{model_name}.keras"
    if not os.path.exists("models"):
        os.makedirs("models")
    if not os.path.exists(model_path):
        gdown.download(f"https://drive.google.com/uc?id={file_id}", model_path, quiet=False)
    return load_model(model_path)

# Preprocessing function
def preprocess_image_tf(uploaded_image, model):
    input_shape = model.input_shape[1:3]
    img = uploaded_image.resize(input_shape).convert("L")
    img_array = np.array(img) / 255.0
    img_array = np.stack([img_array] * 3, axis=-1)
    img_array = np.expand_dims(img_array, axis=0)
    return img_array

# Function to create PDF report
def create_pdf_report(image_path, result, confidence, model_name, recommendations):
    pdf = FPDF()
    pdf.add_page()
    
    # Set font and colors
    pdf.set_font("Arial", size=12)
    pdf.set_text_color(0, 0, 0)
    
    # Header
    pdf.set_font("Arial", 'B', 16)
    pdf.cell(0, 10, "BoneScan AI - Fracture Detection Report", 0, 1, 'C')
    pdf.ln(10)
    
    # Report date
    pdf.set_font("Arial", size=12)
    pdf.cell(0, 10, f"Report Date: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}", 0, 1)
    pdf.ln(5)
    
    # Patient info section (placeholder)
    pdf.set_font("Arial", 'B', 14)
    pdf.cell(0, 10, "Patient Information", 0, 1)
    pdf.set_font("Arial", size=12)
    pdf.cell(0, 10, "Name: ___________________________", 0, 1)
    pdf.cell(0, 10, "ID: _____________________________", 0, 1)
    pdf.cell(0, 10, "Date of Birth: ___________________", 0, 1)
    pdf.ln(10)
    
    # Image
    if os.path.exists(image_path):
        pdf.set_font("Arial", 'B', 14)
        pdf.cell(0, 10, "X-ray Image", 0, 1)
        pdf.image(image_path, x=50, w=110)
        pdf.ln(10)
    
    # Results
    pdf.set_font("Arial", 'B', 14)
    pdf.cell(0, 10, "Analysis Results", 0, 1)
    pdf.set_font("Arial", size=12)
    
    # Set color based on result
    if "Fracture Detected" in result:
        pdf.set_text_color(220, 50, 50)  # Red for fracture
    else:
        pdf.set_text_color(50, 150, 50)  # Green for normal
    
    pdf.cell(0, 10, f"Result: {result}", 0, 1)
    pdf.set_text_color(0, 0, 0)
    pdf.cell(0, 10, f"Confidence: {confidence:.1f}%", 0, 1)
    pdf.cell(0, 10, f"Model Used: {model_name}", 0, 1)
    pdf.ln(10)
    
    # Recommendations
    pdf.set_font("Arial", 'B', 14)
    pdf.cell(0, 10, "Recommendations", 0, 1)
    pdf.set_font("Arial", size=12)
    
    for rec in recommendations:
        pdf.cell(0, 10, f"- {rec}", 0, 1)
    pdf.ln(10)
    
    # Footer
    pdf.set_font("Arial", 'I', 10)
    pdf.cell(0, 10, "This report was generated by BoneScan AI. It is for research purposes only and should", 0, 1, 'C')
    pdf.cell(0, 10, "not be used as a sole diagnostic tool. Always consult with a qualified healthcare professional.", 0, 1, 'C')
    
    # Save PDF
    pdf_path = "bonescan_report.pdf"
    pdf.output(pdf_path)
    return pdf_path

# Streamlit Page Configuration
st.set_page_config(
    page_title="BoneScan AI - Fracture Detection",
    page_icon="ü¶¥",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS Styling
st.markdown("""
<style>
:root {
    --primary: #4E6EAF;
    --primary-dark: #3A5A8A;
    --secondary: #FF7E5D;
    --accent: #6C63FF;
    --background: #F8FAFC;
    --text: #2D3748;
    --text-light: #718096;
    --card-bg: #FFFFFF;
    --danger: #E53E3E;
    --success: #38A169;
    --warning: #DD6B20;
    --sidebar-bg: #FFFFFF;
    --border: #E2E8F0;
    --highlight: rgba(78, 110, 175, 0.1);
    --shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
}

[data-theme="dark"] {
    --primary: #6C63FF;
    --primary-dark: #564EC2;
    --secondary: #FF7E5D;
    --accent: #4E6EAF;
    --background: #121212;
    --text: #E2E8F0;
    --text-light: #A0AEC0;
    --card-bg: #1E1E1E;
    --danger: #FC8181;
    --success: #68D391;
    --warning: #F6AD55;
    --sidebar-bg: #1A1A1A;
    --border: #2D3748;
    --highlight: rgba(108, 99, 255, 0.1);
    --shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.25), 0 2px 4px -1px rgba(0, 0, 0, 0.2);
}

/* Layout */
[data-testid="stAppViewContainer"] {
    background-color: var(--background);
    color: var(--text);
}

[data-testid="stSidebar"] {
    background-color: var(--sidebar-bg) !important;
    border-right: 1px solid var(--border);
}

/* Cards */
.card {
    background-color: var(--card-bg);
    color: var(--text);
    border-radius: 12px;
    padding: 1.5rem;
    box-shadow: var(--shadow);
    margin-bottom: 1.5rem;
    border: 1px solid var(--border);
    transition: all 0.3s ease;
}

.card:hover {
    transform: translateY(-3px);
    box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
}

.model-card {
    border-left: 4px solid var(--primary);
}

.result-card {
    border-left: 4px solid var(--secondary);
}

.upload-card {
    border-left: 4px solid var(--accent);
}

/* Buttons */
.stButton>button {
    background-color: var(--primary);
    color: white;
    border: none;
    border-radius: 8px;
    padding: 0.6rem 1.2rem;
    font-weight: 500;
    transition: all 0.3s;
    box-shadow: var(--shadow);
}

.stButton>button:hover {
    background-color: var(--primary-dark);
    transform: translateY(-2px);
    box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
}

/* Risk Indicators */
.risk-high {
    color: var(--danger);
    font-weight: bold;
    font-size: 1.3rem;
}

.risk-low {
    color: var(--success);
    font-weight: bold;
    font-size: 1.3rem;
}

/* Responsive */
@media (max-width: 768px) {
    .header h1 {
        font-size: 1.8rem;
    }
    
    .header h3 {
        font-size: 1rem;
    }
    
    .card {
        padding: 1.2rem;
    }
}
</style>
""", unsafe_allow_html=True)

# Sidebar
with st.sidebar:
    st.image("https://www.nitm.ac.in/cygnus/nitmeghalaya/ckfinder/userfiles/images/NITM.gif", width=120)
    st.markdown("<h1 style='font-size: 1.8rem; margin-bottom: 0.5rem;'>BoneScan AI</h1>", unsafe_allow_html=True)
    st.markdown("<p style='font-size: 0.9rem; opacity: 0.8; margin-top: 0;'>Clinical Fracture Detection</p>", unsafe_allow_html=True)
    
    st.markdown("---")
    
    selected_model_name = st.selectbox(
        "üß† Select AI Model", 
        options=list(model_ids.keys()),
        help="Choose the deep learning model for analysis",
        index=0
    )
    
    st.markdown("---")
    st.markdown("### üìù Instructions")
    st.markdown("""
    1. Upload X-ray image
    2. Select AI model
    3. Review analysis
    4. Download PDF report
    """)
    
    st.markdown("---")
    st.markdown("### ‚ö†Ô∏è Medical Disclaimer")
    st.markdown("""
    This tool is for **research and preliminary assessment only**. 
    Not for diagnostic use. Always consult a qualified radiologist.
    """)

# Main Content
st.markdown("""
    <div style="background: linear-gradient(135deg, var(--primary), var(--primary-dark));
                color: white;
                padding: 2rem;
                border-radius: 0 0 12px 12px;
                margin: -1rem -1rem 2rem -1rem;
                text-align: center;">
        <h1>BoneScan AI</h1>
        <h3 style="font-weight: 400;">Advanced Fracture Detection System</h3>
    </div>
""", unsafe_allow_html=True)

# Main columns
col1, col2 = st.columns([2, 1], gap="large")

with col1:
    # Upload section
    st.markdown("""
        <div class="card upload-card">
            <h2>üì§ Upload X-ray Image</h2>
            <p>For best results, use clear, high-contrast images of the affected area.</p>
        </div>
    """, unsafe_allow_html=True)
    
    uploaded_file = st.file_uploader(
        "Drag and drop or click to upload", 
        type=["jpg", "jpeg", "png"],
        label_visibility="collapsed"
    )
    
    if uploaded_file:
        try:
            # Save uploaded image temporarily
            image_path = "uploaded_xray.jpg"
            image_file = Image.open(uploaded_file).convert("RGB")
            image_file.save(image_path)
            
            st.image(image_file, caption="Uploaded X-ray", use_column_width=True)
            
            # Load selected model
            with st.spinner(f"üîÑ Loading {selected_model_name}..."):
                file_id = model_ids[selected_model_name]
                model = load_tensorflow_model(file_id, selected_model_name.replace(" ", "_"))
                
            with st.spinner("üîç Analyzing image..."):
                processed_image = preprocess_image_tf(image_file, model)
                prediction = model.predict(processed_image)
                confidence = prediction[0][0]
                
                result = "Fracture Detected" if confidence > 0.5 else "Normal"
                confidence_score = confidence if result == "Fracture Detected" else 1 - confidence
                confidence_percent = confidence_score * 100
                
                # Generate recommendations
                if result == "Fracture Detected":
                    recommendations = [
                        "Consult an orthopedic specialist immediately",
                        "Immobilize the affected area",
                        "Avoid putting weight on the injured limb",
                        "Apply ice to reduce swelling if appropriate",
                        "Consider emergency evaluation if severe pain or deformity"
                    ]
                else:
                    recommendations = [
                        "Clinical correlation recommended if symptoms persist",
                        "Consider follow-up imaging if pain continues beyond 1 week",
                        "RICE protocol (Rest, Ice, Compression, Elevation) may help",
                        "Over-the-counter analgesics as needed"
                    ]
                
                # Display results
                st.markdown(f"""
                    <div class="card result-card">
                        <h2>üìù Analysis Results</h2>
                        <div style="font-size: 1.2rem; margin: 1rem 0;">
                            Status: <span class="{'risk-high' if result == 'Fracture Detected' else 'risk-low'}">
                                {result}
                            </span>
                        </div>
                        <div style="font-size: 1.2rem;">
                            Confidence: <strong>{confidence_percent:.1f}%</strong>
                        </div>
                    </div>
                """, unsafe_allow_html=True)
                
                # Generate PDF report
                with st.spinner("Generating PDF report..."):
                    pdf_path = create_pdf_report(
                        image_path=image_path,
                        result=result,
                        confidence=confidence_percent,
                        model_name=selected_model_name,
                        recommendations=recommendations
                    )
                    
                    # Download button for PDF
                    with open(pdf_path, "rb") as f:
                        pdf_bytes = f.read()
                    
                    st.download_button(
                        label="üìÑ Download Full Report (PDF)",
                        data=pdf_bytes,
                        file_name="bonescan_report.pdf",
                        mime="application/pdf"
                    )
                
                # Show recommendations
                if result == "Fracture Detected":
                    st.markdown(f"""
                        <div class="card" style="border-left: 4px solid var(--danger);">
                            <h3>‚ö† Medical Recommendation</h3>
                            <p>Our analysis indicates a potential fracture:</p>
                            <ul>
                                {"".join([f"<li>{rec}</li>" for rec in recommendations])}
                            </ul>
                        </div>
                    """, unsafe_allow_html=True)
                else:
                    st.markdown(f"""
                        <div class="card" style="border-left: 4px solid var(--success);">
                            <h3>‚úÖ No Fracture Detected</h3>
                            <p>Our analysis found no evidence of fracture:</p>
                            <ul>
                                {"".join([f"<li>{rec}</li>" for rec in recommendations])}
                            </ul>
                        </div>
                    """, unsafe_allow_html=True)
                    st.balloons()
                    
        except Exception as e:
            st.error(f"Error analyzing the image: {str(e)}")

with col2:
    # Model information
    st.markdown(f"""
        <div class="card model-card">
            <h2>üß† Selected Model</h2>
            <p><strong>{selected_model_name}</strong></p>
            <p>This model analyzes bone structures to detect potential fractures.</p>
            
            <h4>Performance Metrics</h4>
            <div style="margin: 1rem 0;">
                <div style="display: flex; justify-content: space-between;">
                    <span>Accuracy</span>
                    <span>94%</span>
                </div>
                <div style="height: 6px; background: var(--border); border-radius: 3px; margin: 0.3rem 0;">
                    <div style="width: 94%; height: 100%; background: var(--primary); border-radius: 3px;"></div>
                </div>
                
                <div style="display: flex; justify-content: space-between;">
                    <span>Sensitivity</span>
                    <span>92%</span>
                </div>
                <div style="height: 6px; background: var(--border); border-radius: 3px; margin: 0.3rem 0;">
                    <div style="width: 92%; height: 100%; background: var(--primary); border-radius: 3px;"></div>
                </div>
                
                <div style="display: flex; justify-content: space-between;">
                    <span>Specificity</span>
                    <span>96%</span>
                </div>
                <div style="height: 6px; background: var(--border); border-radius: 3px; margin: 0.3rem 0;">
                    <div style="width: 96%; height: 100%; background: var(--primary); border-radius: 3px;"></div>
                </div>
            </div>
        </div>
    """, unsafe_allow_html=True)
    
    st.markdown("""
        <div class="card">
            <h2>üîß How It Works</h2>
            <ol>
                <li>Upload X-ray image</li>
                <li>AI processes image features</li>
                <li>Deep learning analysis</li>
                <li>Confidence score generated</li>
                <li>Results displayed</li>
            </ol>
        </div>
    """, unsafe_allow_html=True)
    
    st.markdown("""
        <div class="card">
            <h2>üí° Imaging Tips</h2>
            <ul>
                <li>Use proper anatomical positioning</li>
                <li>Ensure good image contrast</li>
                <li>Include the entire area of interest</li>
                <li>Upload multiple views if available</li>
            </ul>
        </div>
    """, unsafe_allow_html=True)

# Footer
st.markdown("---")
st.markdown("""
    <div style="text-align: center; color: var(--text-light); font-size: 0.9rem; padding: 1rem;">
        <p>BoneScan AI v2.0 | For research purposes only | Not for clinical use</p>
        <p>¬© 2025 Medical AI Research Group | All rights reserved</p>
    </div>
""", unsafe_allow_html=True)
